namespace ClearCore {
/**
\page SerialDriverMain SerialDriver COM Ports
<h1> Overview </h1>
    For applications that require sending or receiving data over a serial port ClearCore provides two COM ports (COM-0 and COM-1). The COM ports may be interfaced-with using the SerialDriver class.\n 
    In code, these connectors are represented by ConnectorCOM0 and ConnectorCOM1.
    
    For UART communications the SerialDrivers may have their operational mode configured to facilitate either TTL or RS-232 wiring schemes. For SPI communications there is an SPI mode. The SerialDriver\n 
    connectors also have an auxiliary mode called CCIO. This mode is used to connect to the ClearCore I/O Expansion Board (CCIO-8) which provides eight additional digital I/O points.
    
<h2> Wiring and Initialization </h2>
    - See the <a href="www.teknic.com/files/downloads/clearcore_system_diagram.pdf#page=4">ClearCore System Diagram</a> for details on wiring COM-0 or COM-1 to a UART device, SPI device, or RS-232 DCE/Modem or DTE/Host.
    - Initialize the serial port into the correct mode by calling the \ref SerialDriver#Mode() function. See below for examples on setting specific modes.
    
<h2> RS-232/TTL Modes </h2>
    RS-232 and TTL (UART) modes use one wire (Rx) for receiving and another wire (Tx) for transmitting serial data asynchronously at a pre-determined baud rate. These modes are identical except that\n 
    the signals used are inverted. Data frames are signaled by the use of start and stop bits of opposite polarity. The number of stop bits in a data frame is 1 by default, but may be set to 2. \n
    Transmission parity may also be configured, but is turned off by default. For each mode, flow control may optionally be enabled to make use of the RTS and CTS lines.
    
    \code{.cpp}
    // Configure COM-1 for TTL mode.
    ConnectorCOM1.Mode(Connector::TTL);
    // Set the data baud rate.
    ConnectorCOM1.Speed(9600);
    // Open the serial port to enable data transmission.
    ConnectorCOM1.PortOpen();
    \endcode
    
    \code{.cpp}
    // Configure COM-0 for RS-232 mode.
    ConnectorCOM0.Mode(Connector::RS232);
    // Set the data baud rate.
    ConnectorCOM0.Speed(115200);
    // (Optional) Set the data frame parity.
    ConnectorCOM0.Parity(SerialBase::PARITY_O);
    // (Optional) Set each data frame to use 2 stop bits.
    ConnectorCOM0.StopBits(2);
    // (Optional) Enable flow control.
    ConnectorCOM0.FlowControl(true);
    // Open the serial port to enable data transmission.
    ConnectorCOM0.PortOpen();
    \endcode
    
    Once the port is open use Send() to output characters or numeric data to the serial port. Use SendLine() to send data appended with carriage return and newline characters.
    
    \code{.cpp}
    // Output some data to COM-0.
    ConnectorCOM0.Send("Hello, ");
    ConnectorCOM0.SendLine("world!");
    \endcode
    
    To halt serial communications close the port using the \ref SerialDriver#PortClose() function. Once the port is closed data will no longer be received by or transmitted from the serial port. \n
    The port will only start receiving input again when it is re-opened.
    
    \code{.cpp}
    // Close COM-0 to end serial communications.
    ConnectorCOM0.PortClose();
    \endcode

<h2> SPI Mode </h2>
    SPI (Serial Peripheral Interface) is a synchronous data transfer protocol; besides lines for transmitting and receiving data there is also a dedicated clock (SCK) to synchronize transfers. With \n
    the ClearCore acting as an SPI master device the MOSI (Master Out, Slave In) line is analogous to the Tx signal, while the MISO (Master In, Slave Out) line is analogous to the Rx signal in \n
    RS-232/TTL modes. As in RS-232/TTL modes, the speed of data transfers is set by the Speed() function. The difference is that in SPI there are no start or stop bits since data transfer is \n
    synchronized using the clock signal. The polarity of the SPI clock can be configured to be idle low (default) or idle high. The SPI clock's phase may be configured so that data is sampled on a \n
    falling edge and shifted out on a rising edge (default) or vice versa.
    
    \code{.cpp}
    // Configure COM-0 for SPI mode.
    ConnectorCOM0.Mode(Connector::SPI);
    // Set the clock frequency / data transfer rate.
    ConnectorCOM0.Speed(9600);
    // Set the SPI clock polarity and phase to match the target device.
    ConnectorCOM0.SpiClock(SerialDriver::SCK_HIGH, SerialDriver::LEAD_SAMPLE);
    // Open the serial port to enable data transmission.
    ConnectorCOM0.PortOpen();
    \endcode
    
    Toggle the Slave Select line to send to or receive data from the connected SPI device.
    \code{.cpp}
    // Assert the Slave Select line to begin data transfer.
    ConnectorCOM0.SpiSsMode(SerialDriver::LINE_ON);
    // Receive up to 100 bytes of data from the connected SPI device.
    uint8_t received[100] = {0};
    ConnectorCOM0.SpiTransferData(nullptr, received, 100);
    // De-assert the Slave Select line to end data transfer.
    ConnectorCOM0.SpiSsMode(SerialDriver::LINE_OFF);
    \endcode
    
    To halt serial communications close the port using the \ref SerialDriver#PortClose() function. Once the port is closed, data will no longer be received by or transmitted from the serial port. \n
    The port will only start receiving input again when it is re-opened.

    \code{.cpp}
    // Close COM-0 to end serial communications.
    ConnectorCOM0.PortClose();
    \endcode
   
<h2> CCIO-8 Mode </h2>
    Both SerialDriver ports may be configured for communications with up to eight ClearCore I/O Expansion Boards (CCIO-8). The operations of the attached CCIO-8 boards will be controlled by \n
    ClearCore's CcioBoardManager, but the initial port setup is controlled by the SerialDriver functions.
    
    \code{.cpp}
    // Set the mode of COM-0 to control the attached CCIO-8 boards.
    ConnectorCOM0.Mode(Connector::CCIO);
    // Open the serial port in CCIO-8 mode.
    ConnectorCOM0.PortOpen();
    \endcode
    
    The CcioBoardManager controls closing down of the CCIO-8 link and its associated serial port.
    \code{.cpp}
    // Close down the CCIO-8 link when we're done.
    CcioMgr.LinkClose();
    \endcode

**/
//********************************************************************************************
}